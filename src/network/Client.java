package network;

import java.awt.Image;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.net.Socket;
import java.util.Date;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;

public class Client extends javax.swing.JFrame {

    private static DataInputStream from_Server;
    private static DataOutputStream to_Server;
    private static Socket serverSocket;
    private static boolean Continue = true;
    private static int round = 0;
    private static int playerNum;
    private static String result = "";
    private static String finalCheck = "";
    static Scanner userAns = new Scanner(System.in);

    // the client constructor, some GUI modifications are done inside
    public Client() {
        initComponents();
        // setting an image inside the frame
        ImageIcon ico = new ImageIcon("gameImage.jpg");
        Image img = ico.getImage();
        Image imgScale = img.getScaledInstance(label_img.getWidth(), label_img.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon scaledIcon = new ImageIcon(imgScale);
        label_img.setIcon(scaledIcon);  // set the game image to the label
        setIconImage(new ImageIcon("clientIcon.png").getImage()); // Set Icon for the fraem
        this.setTitle("Knowledge Game"); // set frame title
        this.setLayout(null);
        A.setVisible(false);
        B.setVisible(false);
        C.setVisible(false);
        D.setVisible(false);
        button_submit.setVisible(false);
        label_connection.setText(new Date() + " Connecting to server\n");
        // centering the label text
        label_playerNo.setHorizontalAlignment(SwingConstants.CENTER);
        label_playerNo.setVerticalAlignment(SwingConstants.CENTER);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        radioButtonGroup = new javax.swing.ButtonGroup();
        mainPanel = new javax.swing.JPanel();
        label_above = new javax.swing.JLabel();
        label_below = new javax.swing.JLabel();
        button_submit = new javax.swing.JButton();
        button_quit = new javax.swing.JButton();
        A = new javax.swing.JRadioButton();
        B = new javax.swing.JRadioButton();
        C = new javax.swing.JRadioButton();
        D = new javax.swing.JRadioButton();
        greenPanel = new javax.swing.JPanel();
        label_img = new javax.swing.JLabel();
        label_playerNo = new javax.swing.JLabel();
        label_connection = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        mainPanel.setBackground(new java.awt.Color(255, 255, 255));
        mainPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainPanelMouseClicked(evt);
            }
        });
        mainPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        label_above.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        mainPanel.add(label_above, new org.netbeans.lib.awtextra.AbsoluteConstraints(323, 6, 500, 59));

        label_below.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        mainPanel.add(label_below, new org.netbeans.lib.awtextra.AbsoluteConstraints(322, 71, 530, 41));

        button_submit.setBackground(new java.awt.Color(255, 255, 255));
        button_submit.setText("Submit Answer");
        button_submit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_submitActionPerformed(evt);
            }
        });
        mainPanel.add(button_submit, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 250, 188, -1));

        button_quit.setBackground(new java.awt.Color(255, 255, 255));
        button_quit.setText("Quit");
        button_quit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        button_quit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_quitActionPerformed(evt);
            }
        });
        mainPanel.add(button_quit, new org.netbeans.lib.awtextra.AbsoluteConstraints(780, 250, 108, -1));

        A.setBackground(new java.awt.Color(255, 255, 255));
        radioButtonGroup.add(A);
        A.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AActionPerformed(evt);
            }
        });
        mainPanel.add(A, new org.netbeans.lib.awtextra.AbsoluteConstraints(332, 147, -1, -1));

        B.setBackground(new java.awt.Color(255, 255, 255));
        radioButtonGroup.add(B);
        B.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        B.setName(""); // NOI18N
        mainPanel.add(B, new org.netbeans.lib.awtextra.AbsoluteConstraints(332, 190, -1, -1));

        C.setBackground(new java.awt.Color(255, 255, 255));
        radioButtonGroup.add(C);
        C.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        mainPanel.add(C, new org.netbeans.lib.awtextra.AbsoluteConstraints(607, 147, -1, -1));

        D.setBackground(new java.awt.Color(255, 255, 255));
        radioButtonGroup.add(D);
        D.setFont(new java.awt.Font("Times New Roman", 0, 16)); // NOI18N
        D.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                DItemStateChanged(evt);
            }
        });
        mainPanel.add(D, new org.netbeans.lib.awtextra.AbsoluteConstraints(607, 190, -1, -1));

        greenPanel.setBackground(new java.awt.Color(166, 214, 202));

        label_img.setMaximumSize(new java.awt.Dimension(845, 400));

        label_playerNo.setFont(new java.awt.Font("Times New Roman", 1, 24)); // NOI18N
        label_playerNo.setForeground(new java.awt.Color(255, 255, 255));

        label_connection.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        label_connection.setForeground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout greenPanelLayout = new javax.swing.GroupLayout(greenPanel);
        greenPanel.setLayout(greenPanelLayout);
        greenPanelLayout.setHorizontalGroup(
            greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(greenPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_playerNo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label_img, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label_connection, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE))
                .addContainerGap())
        );
        greenPanelLayout.setVerticalGroup(
            greenPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, greenPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_playerNo, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_img, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addComponent(label_connection)
                .addContainerGap())
        );

        mainPanel.add(greenPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 290));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 904, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_AActionPerformed

    // quit button to exit the game
    private void button_quitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_quitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_button_quitActionPerformed

    // submit button sends the client's answer to the server
    private void button_submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_submitActionPerformed

        if (A.isSelected()) {  // if choice A is selected
            try {
                to_Server.writeUTF("A");
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (B.isSelected()) {  // if choice B is selected
            try {
                to_Server.writeUTF("B");
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (C.isSelected()) {  // if choice C is selected
            try {
                to_Server.writeUTF("C");
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else if (D.isSelected()) {  // if choice D is selected
            try {
                to_Server.writeUTF("D");
            } catch (IOException ex) {
                Logger.getLogger(Client.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_button_submitActionPerformed

    private void mainPanelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainPanelMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_mainPanelMouseClicked

    private void DItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_DItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_DItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Client.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Client.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Client.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Client.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        new Client().setVisible(true);

        // Connecting to server socket
        connectToServer();

        // Control the game on a separate thread
//        new Thread(() -> {
        try {
            playerNum = from_Server.readInt();
            A.setVisible(false);
            B.setVisible(false);
            C.setVisible(false);
            D.setVisible(false);
            if (playerNum == 1) {
                label_playerNo.setText("You are player 1!");
                label_above.setText("Waiting for player 2 to join!");
                from_Server.readInt();  // waiting a signal from the server to start the game
                label_below.setText("Player 2 has joined. you start first");

            } else if (playerNum == 2) {
                label_playerNo.setText("You are player 2!");
                label_above.setText("Waiting for player 1 to start the game!");
                label_below.setText("");
            }

            while (Continue) {
                A.setVisible(false);
                B.setVisible(false);
                C.setVisible(false);
                D.setVisible(false);
                if (playerNum == 1) {
                    gameStatus();             // Update players status
                    receiveInfoFromServer(); // Receive question from the server
                    round++;
                    gameStatus();            // Update players status
                    clear();

                } else if (playerNum == 2) {
                    gameStatus();             // Update players status
                    receiveInfoFromServer(); // Receive question from the server
                    gameStatus();            // Update players status
                    clear();
                    Continue = from_Server.readBoolean();
                }

            }
        } catch (Exception e) {
            label_above.setText(result);
            button_submit.setVisible(false);
            A.setVisible(false);
            B.setVisible(false);
            C.setVisible(false);
            D.setVisible(false);
            // exit game in 6 seconds after it ends or if the server exits
            long endTime = System.currentTimeMillis() + 6000;
            while (true) {
                if (endTime < System.currentTimeMillis()) {
                    System.exit(0);
                } else {
                    label_above.setText(finalCheck);
                    label_below.setText(result + " .. [ Closing in " + (int) ((endTime / 1000.0) - (System.currentTimeMillis() / 1000.0)) + "]");
                }
            }
        }
//        }).start();
    }

    // connecting to the server method
    public static void connectToServer() {
        try {
            serverSocket = new Socket("localhost", 8888);  // connecting to server at specified IP address and port number using a TCP connection
            label_connection.setText(new Date() + " Connecting to server\n");

            from_Server = new DataInputStream(serverSocket.getInputStream()); // creating an output stream to recieve Input from server

            to_Server = new DataOutputStream(serverSocket.getOutputStream()); // creating an output stream to send data to the server

            label_connection.setText(new Date() + " Connected to server\n");

        } catch (Exception e) {
            System.out.println(e);
            // error meddage if the client tries to connect to the server when it is disconnected
            label_connection.setText(new Date() + " Failed to Connect\n");
            JOptionPane.showMessageDialog(null, "Server is Disconnected", "Error", JOptionPane.ERROR_MESSAGE);
            System.exit(0);
        }
    }

    // receiving the question from the server method
    public static void receiveInfoFromServer() throws IOException {
        button_submit.setVisible(true);
        label_below.setText("");
        A.setVisible(true);
        B.setVisible(true);
        C.setVisible(true);
        D.setVisible(true);
        // wrapping the question to the label (when the question it too long)
        // receiving the question from the server
        String formatted = String.format("<html><body style=\"text-align: justify;  text-justify: inter-word;\">%s</body></html>", from_Server.readUTF());
        label_below.setText(formatted);

        // recieving answer choices from server
        A.setText("A. " + from_Server.readUTF());
        B.setText("B. " + from_Server.readUTF());
        C.setText("C. " + from_Server.readUTF());
        D.setText("D. " + from_Server.readUTF());

    }

    // receiving other messages from the server method
    public static void gameStatus() throws IOException {
        /* Update player's game status*/
        if (playerNum == 1 && round == 0) {
            label_above.setText(from_Server.readUTF());
        } else {
            finalCheck = from_Server.readUTF();
            label_above.setText(finalCheck);
            result = from_Server.readUTF();
            label_above.setText("<html>" + label_above.getText() + "<br/>" + result + "</html>");
            label_below.setText("");
            if (result.equals("You WON!") || result.equals("Player 1 has WON!")
                    || result.equals("Game is over, no winner!")) {
                Continue = false;

            }

        }
    }

    // clearing previous answer on the raido buttons
    public static void clear() {
        radioButtonGroup.clearSelection();
        button_submit.setVisible(false);
    }

    // used elements:
    // radio buttons: A, B, C and D and radioButtonGroup is used to group the radio buttons together
    // buttons: button_quit and button_submit
    // panels: greenPanel and mainPanel(the white one lies in the bg)
    // labels: label_above, label_below, label_connection, label_img, label_playerNo
    // Variables declaration - do not modify//GEN-BEGIN:variables
    public static javax.swing.JRadioButton A;
    public static javax.swing.JRadioButton B;
    public static javax.swing.JRadioButton C;
    public static javax.swing.JRadioButton D;
    private static javax.swing.JButton button_quit;
    private static javax.swing.JButton button_submit;
    private static javax.swing.JPanel greenPanel;
    private static javax.swing.JLabel label_above;
    private static javax.swing.JLabel label_below;
    private static javax.swing.JLabel label_connection;
    private static javax.swing.JLabel label_img;
    private static javax.swing.JLabel label_playerNo;
    private static javax.swing.JPanel mainPanel;
    public static javax.swing.ButtonGroup radioButtonGroup;
    // End of variables declaration//GEN-END:variables

}
